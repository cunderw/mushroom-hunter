// Mocks generated by Mockito 5.4.4 from annotations
// in my_mushrooms_hunter/test/widgets/mushroom_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:google_maps_flutter/google_maps_flutter.dart' as _i5;
import 'package:image_picker/image_picker.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_mushrooms_hunter/data/mushroom_provider.dart' as _i2;
import 'package:my_mushrooms_hunter/models/mushroom.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MushroomProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMushroomProvider extends _i1.Mock implements _i2.MushroomProvider {
  MockMushroomProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveMushroom(
    _i4.XFile? image,
    String? name,
    String? description,
    _i5.LatLng? geolocation,
    DateTime? dateFound,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMushroom,
          [
            image,
            name,
            description,
            geolocation,
            dateFound,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateMushroom(_i6.Mushroom? mushroom) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMushroom,
          [mushroom],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMushroom(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMushroom,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i6.Mushroom>> userMushrooms() => (super.noSuchMethod(
        Invocation.method(
          #userMushrooms,
          [],
        ),
        returnValue: _i3.Stream<List<_i6.Mushroom>>.empty(),
      ) as _i3.Stream<List<_i6.Mushroom>>);
}
